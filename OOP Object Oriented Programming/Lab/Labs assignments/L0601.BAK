#include <iostream.h>
#include <stdio.h>
#include <conio.h>

class Stack
{
	private:
		int top;
		int size;
		int * ptr;
		static int counter;

	public:
		int isFull();
		int isEmpty();

		static int getCounter()
		{
			return counter;
		}

		Stack()
		{
			top = 0;
			size = 10;
			ptr = new int[size];

			counter++;

			cout << "This is the default constructor" << endl;
		}
		Stack(int n)
		{
			top = 0;
			size = n;
			ptr = new int[size];
			counter++;
			cout << "This is a constructor with one parameter" << endl;
		}
		~Stack()
		{
			delete [] ptr;
			size = 0;

			counter--;

			cout << "This is the destructor" << endl;
		}
		int push(int n);
		int pop(int & n);
};

int Stack :: counter = 0;

/*Stack :: Stack()
{
	top = 0;
	size = 10;
	ptr = new int[size];

	counter++;

	cout << "This is the default constructor" << endl;

}*/

/*Stack :: Stack(int n)
{
	top = 0;
	size = n;
	ptr = new int[size];

	counter++;

	cout << "This is a constructor with one parameter" << endl;
}*/

/*Stack :: ~Stack()
{
	delete [] ptr;
	size = 0;

	counter--;

	cout << "This is the destructor" << endl;
}*/


int Stack :: isFull()
{
	return(top == size);
}


int Stack :: isEmpty()
{
	return (top == 0);
}


int Stack :: push(int n)
{
	if(isFull())
		return 0;
	ptr[top] = n;
	top++;

	return 1;
}


int Stack :: pop(int & n)
{
	if(isEmpty())
		return 0;

	top--;

	n = ptr[top];

	return 1;
}




int main()
{
	clrscr();

	int x;

	Stack s1(3);

	s1.push(20);
	s1.push(30);
	s1.push(40);
	s1.push(50);


	if(s1.pop(x))
		cout << x << endl;

	if(s1.pop(x))
		cout << x << endl;

	getch();

	return 1;
}